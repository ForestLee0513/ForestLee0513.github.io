{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/RN-에서-StatusBar가-안보이는-문제/",
    "result": {"data":{"site":{"siteMetadata":{"title":"이우림","siteUrl":"https://forestlee0513.github.io"}},"markdownRemark":{"id":"c978bcb5-b4d2-5aaf-866b-1e3c82371de7","excerpt":"이슈 발견 얼마 전 RN 프로젝트를 진행하며 레이아웃을 적용하게 되었는데, 이 과정에서 의 색상이 배경색과 비슷하게 보이는 문제가 발생하였습니다. 다행히 이전 글인 RN에서 Status Bar…","html":"<h2>이슈 발견</h2>\n<p>얼마 전 RN 프로젝트를 진행하며 레이아웃을 적용하게 되었는데, 이 과정에서 <code class=\"language-text\">StatusBar</code>의 색상이 배경색과 비슷하게 보이는 문제가 발생하였습니다.</p>\n<p>다행히 이전 글인 <strong>RN에서 Status Bar 영역 구분</strong> 글에서도 다뤘던 <code class=\"language-text\">StatusBar</code> 컴포넌트를 사용하여 제어가 가능하므로 오늘도 이것을 다루고자 합니다.</p>\n<h2>StatusBar 살펴보기</h2>\n<p>먼저 <code class=\"language-text\">StatusBar</code>는 React Native에서 제공하는 컴포넌트이지만 사실 이 컴포넌트는 자주 사용할 일이 없습니다.</p>\n<p>먼저, <code class=\"language-text\">StatusBar</code>는 기본으로 이미 정해진 값이 있어 기본값으로 적용하지만 커스텀이 필요한 경우가 생겨 해당 컴포넌트를 직접 추가하게 되면, 여러 개를 생성할 수 있지만 마운트 됐을 때 나중에 생성된 컴포넌트를 기준으로 <code class=\"language-text\">StatusBar</code>가 갱신됩니다.</p>\n<p>그래서 이 컴포넌트 덕분에 우리는 다양한 <code class=\"language-text\">StatusBar</code>의 속성을 추가하거나 제거할 수 있습니다.</p>\n<p>하지만 이 컴포넌트의 사용을 최소화해야 하지만 <code class=\"language-text\">StatusBar</code>가 보이지 않는 문제가 발생하니 다루도록 하겠습니다.</p>\n<h2>barStyle란 무엇인가요?</h2>\n<p>이번 이슈는 <code class=\"language-text\">StatusBar</code>의 내용이 보이지 않는 문제가 발생한다는 것인데, 이 이슈는 <code class=\"language-text\">barStyle</code>을 수정하면 해결됩니다.</p>\n<p>이 속성은 Android, iOS 모두 지원하며 기본값은 “default”입니다.</p>\n<p>하지만 값을 “default”로 해도 보이지 않을 때가 있는데, 이때 <code class=\"language-text\">barStyle</code>를 사용합니다.</p>\n<p>값은 enum 타입으로 “default”와 “light-content” 그리고 “dark-content”이 포함되어 있는데, 상황에 맞게 변경하면 됩니다.</p>\n<p>그럼 “default”까지 총 3가지 속성이 있는 것은 충분히 이해했는데, 어떤 기준으로 수정하는지에 대한 의문점이 생길 수 있습니다.</p>\n<p>아마 속성에 “content”라는 키워드가 들어가서 App의 배경을 기준으로 잡는다고 생각할 수도 있으나 App의 배경을 기준으로 잡는 것이 아닌 <code class=\"language-text\">StatusBar</code>의 텍스트 색상을 기준으로 잡습니다.</p>\n<p>예를 들자면, 흰색 배경에서는 어두운 <code class=\"language-text\">StatusBar</code>가 필요하니 <code class=\"language-text\">barStyle</code>은 “dark-content”로 변경하는 형식으로 진행하면 됩니다.</p>\n<h2>재사용 컴포넌트로 변경하기</h2>\n<p>위 내용에서 <code class=\"language-text\">barStyle</code> 컴포넌트로 텍스트 색상을 바꾼다는 것을 알았습니다.</p>\n<p>하지만 매번 컴포넌트를 요청 하는 것도 불편하고 React Native 공식 문서에서도 **”<code class=\"language-text\">barStyle</code> 컴포넌트를 자주 사용하는 것은 좋지 않다”**고 명시가 되어 있어 겉에 감싸는 컨테이너 형식으로 만들어서 재사용을 하고자 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// GlobalContainer.tsx</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StatusBar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-native\"</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGlobalContainer</span> <span class=\"token punctuation\">{</span>\n  backgroundColor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  barStyle<span class=\"token operator\">:</span> <span class=\"token string\">\"default\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"dark-content\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"light-content\"</span>\n  horizontalMargin<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> StyledContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>SafeAreaView<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> IGlobalContainer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    props<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">??</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>StatusBar<span class=\"token punctuation\">.</span>currentHeight <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">padding-top: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>StatusBar<span class=\"token punctuation\">.</span>currentHeight<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  flex: 1;\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> React<span class=\"token punctuation\">.</span>ElementType\n\n<span class=\"token keyword\">const</span> StyledInnerContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>View<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin-left: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> IGlobalContainer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>horizontalMargin <span class=\"token operator\">??</span> <span class=\"token number\">32</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n  margin-right: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> IGlobalContainer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>horizontalMargin <span class=\"token operator\">??</span> <span class=\"token number\">32</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> React<span class=\"token punctuation\">.</span>ElementType\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GlobalContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  horizontalMargin<span class=\"token punctuation\">,</span>\n  backgroundColor<span class=\"token punctuation\">,</span>\n  style<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n  barStyle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> IGlobalContainer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StatusBar</span></span> <span class=\"token attr-name\">barStyle</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>barStyle <span class=\"token operator\">??</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledContainer</span></span> <span class=\"token attr-name\">backgroundColor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledInnerContainer</span></span> <span class=\"token attr-name\">horizontalMargin</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>horizontalMargin<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledInnerContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단하게 예제를 만들어 보았습니다.</p>\n<p>먼저 전역 컨테이너의 스타일을 담당하는 styled-component로 만들어진 <code class=\"language-text\">StyledContainer</code>와 <code class=\"language-text\">StyledInnerContainer</code>가 있어 해당 컴포넌트 안에 <code class=\"language-text\">children</code> prop에 컴포넌트가 들어오게 되면 두 컴포넌트에 감싸져서 Layout 형식으로 감싸게 됩니다.</p>\n<p>그리고 <code class=\"language-text\">StyledContainer</code>와 <code class=\"language-text\">StyledInnerContainer</code>의 상단에 별도로 React Native에서 제공되는 컴포넌트인 <code class=\"language-text\">StatusBar</code>를 적용하는데, <strong>barStyle란 무엇인가요?</strong> 챕터에서 설명했던 속성을 재사용 가능한 컴포넌트 형식으로 같이 한 레이아웃 안에 적용했습니다.</p>\n<p>또한 <code class=\"language-text\">StyledContainer</code>와 <code class=\"language-text\">StyledInnerContainer</code> 컴포넌트가 아닌 본인이 원하는 Footer, Header 등 원하는 컴포넌트를 별도로 적용하여 더욱 유연한 컴포넌트를 적용하는 것도 가능합니다.</p>\n<p>위에서 만든 컴포넌트를 실제로 활용하자면 아래와 같이 적용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> React <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token comment\">/*\n\t절대경로와 index파일로 따로 export 했다는 조건으로 했습니다.\n\timport 경로는 본인이 원하는 경로, 패턴에 맞게 다시 지정하시면 됩니다.\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GlobalContainer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@components\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-native\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GlobalContainer</span></span> <span class=\"token attr-name\">barStyle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark-content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">backgroundColor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#f7f7f7<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World from \"GlobalContainer\" with \"barStyle\"</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">GlobalContainer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MyComponent</code></pre></div>\n<p>마지막으로 다크 모드 대응에 대해서 작성하진 않았지만 Context API, Redux 등 상태 관리를 사용하여 다크 모드 제어도 추가하시면 더욱 유연하게 활용할 수 있는 레이아웃 컴포넌트를 만들 수 있습니다.</p>","frontmatter":{"title":"RN 에서 StatusBar가 안보이는 문제","date":"2022년 02월 14일","description":"RN에서 컨텐츠마다 StatusBar가 안보이는 문제를 살펴보고 해결하는 방법을 소개합니다.","thumbnail":null}},"previous":{"fields":{"slug":"/RN에서-Status-Bar-영역-구분/"},"frontmatter":{"title":"RN에서 Status Bar 영역 구분"}},"next":null},"pageContext":{"id":"c978bcb5-b4d2-5aaf-866b-1e3c82371de7","previousPostId":"6afe07ee-5f52-5f39-97cc-07ae95669cd3","nextPostId":null}},
    "staticQueryHashes": ["3311626724"]}